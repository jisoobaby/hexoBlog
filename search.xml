<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo音乐播放器插件]]></title>
    <url>%2FhexoBlog%2F2019%2F06%2F20%2Fhexo%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[网易播放器 1&lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&amp;id=988690134&amp;auto=1&amp;height=430"&gt;&lt;/iframe&gt; aplayer 播放器在 Hexo 配置文件 _config.yml 中配置本插件： 12345678910aplayer: script_dir: some/place # Public 目录下脚本目录路径，默认: 'assets/js' style_dir: some/place # Public 目录下样式目录路径，默认: 'assets/css' cdn: http://xxx/aplayer.min.js # 引用 APlayer.js 外部 CDN 地址 (默认不开启) style_cdn: http://xxx/aplayer.min.css # 引用 APlayer.css 外部 CDN 地址 (默认不开启) meting: true # MetingJS 支持 meting_api: http://xxx/api.php # 自定义 Meting API 地址 meting_cdn: http://xxx/Meing.min.js # 引用 Meting.js 外部 CDN 地址 (默认不开启) asset_inject: true # 自动插入 Aplayer.js 与 Meting.js 资源脚本, 默认开启 externalLink: http://xxx/aplayer.min.js # 老版本参数，功能与参数 cdn 相同 123456789101112131415161718192021222324252627&#123;% aplayerlist %&#125; &#123; "narrow": false, "autoplay": true, "mode": "order", "showlrc": 3, "mutex": true, "theme": "#e6d0b2", "preload": "metadata", "listmaxheight": "513px", "music": [ &#123; "title": "红楼梦 - 葛冬梅", "author": "葛冬梅", "url": "http://www.ytmp3.cn/down/73693.mp3", "pic": "http://img.ytmp3.cn/image/83.jpg", &#125;, &#123; "title": "出山 - 羽莲亭", "author": "羽莲亭", "url": "http://www.ytmp3.cn/down/73680.mp3", "pic": "http://img.ytmp3.cn/image/31.jpg" &#125; ] &#125; &#123;% endaplayerlist %&#125;]]></content>
      <tags>
        <tag>music</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git与Github的连接与使用]]></title>
    <url>%2FhexoBlog%2F2019%2F06%2F18%2FGit%E4%B8%8EGithub%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下面继续，使用git 将项目上传到GitHub上 首先要有GitHub账号,这就不用说了，没有的先注册，地址：https://github.com 没有仓库的话，先新创建一个仓库 ## 填写新仓库名称，备注信息。点击创建即可完成。 创建完成会显示如下界面。先放置不用管。后面会用到 因为本地Git仓库和GitHub仓库之间的传输是通过SSH加密传输的，GitHub需要识别是否是你推送，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送，所以需要配置ssh key。 1.创建SSH Key。 在用户主目录（C:\Users\Administrator）下，看看有没有.ssh文件，如果有，再看文件下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接到下一步。如果没有，打开Git Bash，输入命令，创建SSH Key 直接回车就哦了 出现上图，就说创建成功啦，再去用户主目录里找到.ssh文件夹，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以公开。 2.接下来到GitHub上，打开“Account settings”–“SSH Keys”页面，然后点击“Add SSH Key”，填上Title（随意写），在Key文本框里粘贴 id_rsa.pub文件里的全部内容。 点“Add Key”，你就应该看到已经添加的Key，可以添加多个Key 3.验证是否成功，在git bash里输入下面的命令 如果初次设置的话，会出现如下界面，输入yes 同意即可 4.下面开始设置username和email，因为github每次commit都会记录他们 5.接下来就是把本地仓库传到github上去，之前在GitHub上建好一个新的仓库是，跳转的页面，完全按照上面的只是操作就可以了。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Github搭建博客]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2FHexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[大家也搭建过博客，很多时候，按着教程来做就可以了，但是我当时为了搭建Hexo博客并部署到Github，走了不少弯路。现在终于搭建出来了，为了帮助大家，我决定写一篇“史上最详细“截图”搭建Hexo博客并部署到Github”。 工具/原料Windows（Mac也是差不多，可参照）GitNode.js安装Hexo1利用 npm 命令即可安装。在任意位置点击鼠标右键，选择Git Base。 史上最详细“截图”搭建Hexo博客并部署到Github2输入命令： npm install -g hexo 注意：-g是指全局安装hexo。 END创建Hexo文件夹安装完成后，在你喜爱的文件夹下（如C:\Hexo），执行以下指令(在C:\Hexo内点击鼠标右键，选择Git Bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 hexo init END安装依赖包npm install END本地查看现在我们已经搭建起本地的hexo博客了，执行以下命令(在C:\Hexo)，然后到浏览器输入localhost:4000看看。 hexo generate hexo server 注册Github账号这里不演示了。 END创建Repository创建的时候注意Repository的名字。比如我的Github账号是angelen10，那么我应该创建的Repository的名字是：angelen10.github.io。 END修改配置文件1到你刚刚创建的Repository下，找到以下内容： 2先点击HTTPS，然后复制里面的地址。然后编辑_config.yml文件（在C:\Hexo下）。 3修改文件里面的deploy。其中的repository就改成你刚刚复制的地址。保存这个文件。 END设置SSH keys1在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。 ls -al ~/.ssh 2如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件： 3输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车： ssh-keygen -t rsa -C “angelen10@163.com“ 4然后它会提示要你输入passphrase（如上图，我没有输入直接回车，如果你输入的话，要记得，到时候会用到）。之后，如果出现类似下图： 5然后键入以下指令： ssh-agent -s 6继续输入指令： ssh-add ~/.ssh/id_rsa 7输入之后，在我这里是出错了，不知道你的有没有出错。 8如果你的也是这样子出错了的话，就输入以下指令： eval ssh-agent -s ssh-add 9到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）： clip &lt; ~/.ssh/id_rsa.pub 10然后到Github里面，点击右上角的设置图标： 11在Settings sidebar那里，点击SSH keys： 12点击Add SSH key： 13输入Title，作为这个key的描述吧（你可以输入Personal MacBook Air，瞬间高大上） 14然后这个Key就是刚刚拷贝的，你直接粘贴就好（也可以文本打开以下文件）： 15点击Add Key： 16输入你的Github密码即可完成SSH Key的添加。嗯，最后还是测试一下吧，键入以下命令： ssh -T git@github.com 17你可能会看到有警告，没事，输入“yes”就好。 END完成部署最后一步，快要成功了，键入指令： hexo generate hexo deploy OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）： http://angelen10.github.io/ 注意：每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在C:\Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的： 对了，记住上图的Username是你的Github账号名称，而不是邮箱；Password就是你的Github的密码。 ENDTipshexo现在支持更加简单的命令格式了，比如： hexo g == hexo generate hexo d == hexo deploy hexo s == hexo server hexo n == hexo new END注意事项这篇和官方的说法有一点不一样，不过这是成功之谈。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My first hexo]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2FMy-first-hexo%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[My first hexo]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2FMy-first-hexo%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[My first hexo]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2FMy-first-hexo%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[Gambit建模中split的用法]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2FGambit%E5%BB%BA%E6%A8%A1%E4%B8%ADsplit%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在Gambit建模中会遇到一些凹槽等结构，需要两个规则结构进行split的，但是利用Split时，到底哪部分切割哪部分呢？剩余部分是否保存呢？ 在这里，用例子来解释上面的问题。 Volume选择的是主体Volume1（或者面），Split With即选择用哪个面或者体来切割上面的Volume1； 若选择Retain，则保留Split With所采用的面或者体，如果实际操作中，发现保存多余了，可以选择撤销，就是Gambit右下角的箭头按钮，或者是选择操作中的删除命令，路径Volume-&gt;Delete Volumes（三维举例）。 采用小体积或者小平面切割大的，和用大的切割小的效果是不同的，通过下图示例大家意会吧。 上图中，大的体为A，小的为B作者：xiaoai_liang来源：CSDN原文：https://blog.csdn.net/xiaoai_liang/article/details/54093133版权声明：本文为博主原创文章，转载请附上博文链接！]]></content>
  </entry>
  <entry>
    <title><![CDATA[修复官方Dplayer-Typecho插件不能连接弹幕API后端的方法]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2F%E4%BF%AE%E5%A4%8D%E5%AE%98%E6%96%B9Dplayer-Typecho%E6%8F%92%E4%BB%B6%E4%B8%8D%E8%83%BD%E8%BF%9E%E6%8E%A5%E5%BC%B9%E5%B9%95API%E5%90%8E%E7%AB%AF%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[说明：博主之前发过DPlayer弹幕后端搭建教程→传送门，也说了下HTML代码的使用方法，不过对于Typecho博客来说，插件不能用会很麻烦，加上看见很多使用Typecho的同学对这个还是有点兴趣的，所以就咨询了下某大佬插件修复方法，貌似是播放器版本没更新到最新，然后在这里就说下，有需求的可以用下。 方法12官方插件地址：https://github.com/MoePlayer/DPlayer-Typecho修复后的地址：https://github.com/menhood/DPlayer-Typecho 1、直接使用去提供修复后的Github地址下载插件，然后将文件夹名改为DPlayer上传到usr/plugins目录启用即可。 2、自行修复如果你不放心使用修复后的插件，那么你可以自行替换文件修复，修复方法如下： 1231)下载官方提供的旧版本插件，插件地址见上面！2)然后下载该地址的4个文件：https://github.com/MoePlayer/DPlayer/tree/master/dist3)将下载的文件复制并替换旧插件dplayer/dist目录的4个文件即可。 使用由于插件地址使用的弹幕服务器地址默认为官方的，貌似服务器出了问题不能用，这里可以使用博主搭建的API服务器，地址为：https://dplayer.moerats.com/，当然你也可以使用博主提供的方法自行搭建API，教程查看→传送门。 1提示：由于特殊原因，博主将下面所有例子最开始的[换成了(，到时候使用的时候，将开头的(换成[，即被[]包住即可。 使用方法如下，直接贴近文章里即可! 1234567891011#默认不自动播放，弹幕开启(dplayer url=&quot;http://xxx.com/xxx.mp4&quot; pic=&quot;http://xxx.com/xxx.jpg&quot;/]#关闭弹幕(dplayer url=&quot;http://xxx.com/xxx.mp4&quot; pic=&quot;http://xxx.com/xxx.jpg&quot; danmu=&quot;false&quot;/]#开启自动播放(dplayer url=&quot;http://xxx.com/xxx.mp4&quot; pic=&quot;http://xxx.com/xxx.jpg&quot; autoplay=&quot;true&quot;/]#添加额外弹幕源(例：bilibili弹幕)，这里和作者的文档有点区别，就是需要在api后面加v3。(dplayer url=&quot;http://xxx.com/xxx.mp4&quot; pic=&quot;http://xxx.com/xxx.jpg&quot; autoplay=&quot;true&quot; addition=&quot;https://api.prprpr.me/dplayer/v3/bilibili?aid=7286894&quot;/] 当然，如果你想假装很多人看的样子，那可以添加额外的bilibili弹幕，这时候不管你放什么视频，B站弹幕都会在上面密密麻麻的滚动。 要是有时候不生效，可以对斜杠/转义一下，比如： 1(dplayer url=&quot;http:\/\/xxx.com\/xxx.mp4&quot; pic=&quot;http:\/\/xxx.com\/xxx.jpg&quot;/] 演示1#这里直接用的B站一个视频，顺便把弹幕也给拉过来了，假装看的人很多吧。 00:00 / 06:47 速度 洗脑循环 显示弹幕 海量弹幕 弹幕透明度]]></content>
  </entry>
  <entry>
    <title><![CDATA[Gitee+Hexo搭建个人博客]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2Fhexo-gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[基于Gitee+Hexo搭建个人博客说到个人博客，我更倾心于GitHub Page方式的个人静态博客，虽然每次需要自己基于Markdown文档生成HTML页面，但是这种方式一是免费，二是可以完全自定义博客且木有广告链接，想用起来极为干净舒适！ 奈何由于国外的GitHub Page访问总是莫名龟速且不稳定，幸好我们有了国内对应的第一个开源代码托管平台码云：码云（https://gitee.com/），因而可以在国内搭建访问与SEO检索都优于GitHub的个人网站。 由于自己刚接触个人网站不久，而且上周才勉强搭建起自己的个人小站。虽然网上有很多详细的教程，但是大多教程彼此借鉴严重，很多步骤只是标准化的回答，导致自己在实际搭建时遇到了不少看似不大，却很严重的“大坑”。作为记录整理，趁热打铁来梳理一下安装过程中遇到的“坑”，也希望可以为其他选择使用Gitee+Hexo搭建个人博客的亲们提供帮助。 一、环境配置由于我们选择在Windows 10平台上使用Gitee+Hexo来搭建个人博客，且网站/博客本质上是一个资源目录，其中包含了显示的页面文本与调用的样式（CSS等）文件，因此我们需要首先在本地建立一个存储个人网站的目录，如命名为MyWebDir。 接下来，我们就需要安装两个重要的环境，一个是提供版本克隆与下载跟踪的Git，一个是由文本文件生成HTML文件的Hexo框架，其中： node.js下载可以从其官方界面开始https://nodejs.org/zh-cn/ Git下载则可以从其官方界面开始https://git-scm.com/ 上述安装下载后按照指示安装即可，安装成功在MyWeb中单击空白右键，应能弹出启动Git Bash Here的选项。 二、Hexo的安装与基本命令接下来我们可以安装生成网站的关键——Hexo架构了，其主要信息和安装命令、主题等都可以从其官网轻松得到：https://hexo.io/zh-cn/ 为了安装Hexo，只需要在MyWeb目录中单击右键启动Git Bash Here，然后输入命令： 1npm install hexo-cli -g 网上有很多其他的命令，建议一切以官网命令为依据，由于时间版本原因，很有可能未来的命令发生改变而失效。 然后等待几分钟（取决于你的网速），完成后需要首先进行初始化在本地生成Hexo相关目录： 1hexo init 然后就可以使用Hexo三连了，即我们最常用的三个主要命令（依旧在上述Git Bash命令端口中）： 123hexo clean # 清空已有hexo网站文件hexo generate(or g) # 依据网页文本与新的CSS样式生成新网站文件hexo server(or s) # 启动本地服务器，可以在localhost:4000查看网站修改效果 依次运行上述三个命令，就可以在浏览器打开localhost:4000端口，查看对应网站界面效果，一般默认的是一个landscape主题，后期当提交新文章或者新的样式修改时，往往都是先从本地查看结果无误后再部署到Gitee Page。 三、主题下载与安装Hexo官网上提供了丰富的主题可选，你只需要打开对应的界面（https://hexo.io/themes/）选择喜欢的，然后点击名称跳转到GitHub仓库选择下载或者克隆对应的zip文件到本地，并且解压到网站目录下的themes目录即可。 下图中则是我网站中的主题文件，请注意网站的路径： 然后接下来，你需要修改两个配置文件： 你的网站根目录下的_config.yml文件，即网站配置文件； 你选择的主题的自带配置文件_config.yml，即主题样式配置文件； 网站配置文件会配置你网站的URL地址、博客名称以及与Gitee上传的方式等基本信息；而主题样式配置文件则会定义实际页面显示的美观效果、多媒体（声音视频等）以及评论等附加功能。 四、网站配置文件修改关于网站配置文件修改很简单，但是并不容易，因为一不小心就会出现域名带来的访问错误，在开始修改网站配置文件前，我建议大家先去Gitee上注册登录新建一个仓库用来保存你未来展示的个人博客页面、样式等资源，关于名称，很多网上教程都说可以自定义，然后在配置文件中正确指定即可，然而这里自己遇到了第一个坑： 坑一：新建仓库与Gitee不同名导致无法正确解析网站配置文件采用文本样式打开后，可以找到下面一段代码： 1234567# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://muqianzhi.gitee.io/root: /permalink: :year/:month/:day/:title/permalink_defaults: 上述说明中提到可以自定义名称，只需要在root字段修改即可，然而这里有两个容易出问题的地方： 你的URL并不是你所在仓库的地址，而应该是你启动仓库的Gitee Page服务后分配给你的网站静态域名，以我个人为例，仓库地址为：https://gitee.com/MuQianzhi/MuQianzhi（我新建的网站名称与Gitee账号同名），而网站URL应为“服务–Gitee Page”启动/更新后显示的网站地址：https://muqianzhi.gitee.io 你的网站目录当然可以和账户不同名，但是那样就需要按照文档说明修改root字段，自己当初定义的名称不同，结果导致域名莫名无法解析，总是无法正确访问网页，因此干脆像GitHub Page一样强制要求使用账号同名新建网站仓库，这样还获得了以账号名为特征的独有域名，一举两得！ 跳过了上面的坑，接下来需要制定网站采用的主题样式，这里也需要注意：主题文件解压缩后不要重命名，直接将主题文件名称复制后设置为网站主题，即 12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# theme: landscapetheme: hexo-theme-landscape 然后需要再修改一次网站部署方式，即如何上传到Gitee上供大家访问呢？自己也遇到了第二个坑： 坑二：Git部署目录不是仓库地址！修改代码： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://gitee.com/MuQianzhi/MuQianzhi.git branch: master 注意上面的repository地址并不是仓库的地址，而是你下载/克隆项目时弹出的那个地址，如果使用git就选择SSH，如果选择HTTPS那么相应的type字段也要修改为https 完成上述修改后，一般而言可以启动本地服务器（你还记得上面的hexo s么？），然后从localhost:4000访问查看即可。 跳过了上面两个坑，后面就比较简单了，你需要仔细阅读主题文件下的README.md文件以根据主题特点实现自定制网站。在此之前，你还需要在网站的Git Bash中运行一次安装所有主题依赖插件包的命令： 1npm install 五、Hexo博客中插入图片一般而言Markdown都提供插入外链图片的方式，然而由于各种网络传输问题，容易导致由此生成的静态网页中的图片无法成功加载，因此本文推荐一种适用于Hexo 3.0以上版本的简单插入图片的方式。 首先修改网站配置文件中的代码：post_asset_folder: true 在你的hexo目录下执行这样一句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件 然后在网站目录下运行Git Bash Here，执行命令 1hexo new &apos;your article name&apos; 运行成功之后就会在网站下的E:\MuQianzhi Blog\source_posts中分别生成对应的Markdown文件与同名空目录； 你的博客文章直接在生成的.md文件中编辑，而引用的图片则以Markdown标准形式![](图片的相对路径)的形式进行，这里的图片路径需要注意要采用相对路径，即(注意需要将‘\’转变为’/‘) 1/your article name/picture&apos;s name.png/jpg 然后运行hexo 三连查看本地图片是否成功，之后运行hexo d部署到Gitee即可 六、Gitee端的更新其实这也算一个小坑吧，一般而言理解一旦运行了hexo deploy(or d)应该就已经将新的网站文件（主要是网站目录下的public目录）上传到了Gitee，然而事实上上步之后直接访问网站URL会发现页面没有改变，原因在于：你、没有、更新！ 是的，对于免费Gitee用户而言，你会需要手动更新一下Gitee Page，然后才可以将修改真的“部署”到可访问的网站上。 以上。 七、末尾上述过程记录了一般采用Gitee+Hexo搭建个人博客的过程，除了跳过几个“坑”之外，还需要认真阅读主题目录下的README.md文件，以进一步修改页面的索引、标签、图片风格等具体样式。 好了，到此为止，你已经有了一个初步的个人博客，剩下的是根据需要添加不同插件或者调整风格了。 祝愿大家都能有一个属于自己的个人博客，感兴趣的朋友可以随时联系我，也可以访问我的个人网站 https://muqianzhi.gitee.io/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FhexoBlog%2F2019%2F05%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
